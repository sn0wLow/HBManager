@inject IDialogService DialogService
@inject IConsumerService ConsumerService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@namespace HBManager.Client

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6" Class="me-5">
            <MudIcon Icon="@Icons.Material.Filled.DeleteForever" Class="mr-3 mb-n1" />
            Verbraucher entfernen?
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudText Typo="Typo.body1">
            @DeleteConsumerButtonText()
        </MudText>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="Delete">Verbraucher entfernen</MudButton>
        <MudButton OnClick="Close">Abbrechen</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter]
    public required MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public required Consumer ConsumerToDelete { get; set; }

    private void Close() => MudDialog.Cancel();

    private async Task Delete()
    {
        var result = await ConsumerService.DeleteConsumerAsync(ConsumerToDelete.ID);

        if (!result.Success)
        {
            Snackbar.Add($"{result.Message}", Severity.Error);
            return;
        }

        Snackbar.Add($"Verbraucher entfernt", Severity.Info);
        MudDialog!.Close(DialogResult.Ok(true));

        NavigationManager.NavigateTo($"consumers");
    }

    private string DeleteConsumerButtonText()
    {
        int amountProducts = ConsumerToDelete.Products.Count();

        if (amountProducts > 0)
        {
            return $"Verbraucher samt {amountProducts} Zuordnungen entfernen?";

        }
        else
        {
            return $"Verbraucher entfernen?";
        }
    }
}



