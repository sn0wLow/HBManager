@inject IDialogService DialogService
@inject IConsumerService ConsumerService
@inject ISnackbar Snackbar
@namespace HBManager.Client
@using MudBlazor.Utilities;

<div>
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6" Class="me-5">
                <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3 mb-n1" />
                Verbraucher hinzufügen
            </MudText>
        </TitleContent>
        <DialogContent>
            <EditForm Model="@consumerAddDTO" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <MudTextField T="string" @bind-Value="@consumerAddDTO.Name"
                              For="@(() => consumerAddDTO.Name)" Label="Name des Verbrauchers"
                              Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Title" AdornmentColor="Color.Default"
                              Class="mb-5" Variant="Variant.Filled" />

                @if (!isColorValid)
                {
                    <div class="d-flex justify-content-between mb-1">
                        <MudText Color="Color.Error">Valide Farbe des Verbrauchers auswählen</MudText>
                        <MudIcon Icon="@Icons.Material.Filled.Palette" AdornmentColor="Color.Default" />
                    </div>
                    <MudDivider />
                }
                else
                {
                    <div class="d-flex justify-content-between mb-1">
                        <MudText>Farbe des Verbrauchers</MudText>
                        <MudIcon Icon="@Icons.Material.Filled.Palette" AdornmentColor="Color.Default" />
                    </div>
                    <MudDivider />
                }

                <MudColorPicker PickerVariant="PickerVariant.Static" ColorPickerView="ColorPickerView.Palette"
                                Palette="customPalette" Class="palette-picker" ValueChanged="@(m => SelectedColorChanged(m))" />



                <div class="px-1 py-1 d-flex justify-content-end">
                    <MudButton Color="Color.Tertiary" ButtonType="ButtonType.Submit">Verbraucher hinzufügen</MudButton>
                    <MudButton OnClick="Close" Class="ms-1">Schließen</MudButton>
                </div>
            </EditForm>
        </DialogContent>
    </MudDialog>
</div>
@code {
    [CascadingParameter]
    public required MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public required List<Consumer> LocalConsumers { get; set; }

    private ConsumerAddDTO consumerAddDTO = new ConsumerAddDTO();

    private bool processing = false;

    private MudColor? pickedColor = null;
    private int pickedColorIndex = -1;
    private bool isColorValid = true;

    private List<MudColor> customPalette = ConsumerColor.Palette.Select(x => new MudColor(x)).ToList();

    private void SelectedColorChanged(MudColor selectedColor)
    {
        pickedColor = selectedColor;

        pickedColorIndex = ConsumerColor.Palette.FindIndex(0, x => x.Equals(pickedColor.Value, StringComparison.InvariantCultureIgnoreCase));
        isColorValid = pickedColorIndex == -1 ? false : true;

    }

    private void Close() => MudDialog?.Cancel();
    private async Task OnValidSubmit(EditContext context)
    {
        if (processing)
        {
            return;
        }

        if (pickedColorIndex == -1)
        {
            isColorValid = false;
            return;
        }

        processing = true;

        consumerAddDTO.ColorIndex = pickedColorIndex;
        var result = await ConsumerService.AddConsumerAsync(consumerAddDTO);

        if (!result.Success)
        {
            Snackbar.Add($"{result.Message}", Severity.Error);
            processing = false;
            return;
        }

        var newConsumer = result.Data!;

        LocalConsumers.Add(newConsumer);

        Snackbar.Add("Verbraucher hinzugefügt", Severity.Success);
        MudDialog!.Close(DialogResult.Ok(true));
        processing = false;
    }
}
